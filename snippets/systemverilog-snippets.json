{
  "module with parameters": {
    "prefix": [
      "paramod",
      "module #"
    ],
    "body": [
      "module ${1:moduleName} #(",
      "\t${2:parameters}",
      ") (",
      "\t${3:ports}",
      ");",
      "\t$0",
      "endmodule"
    ],
    "description": "Insert a module with parameter"
  },
  "module without parameters": {
    "prefix": "module",
    "body": [
      "module ${1:moduleName} (",
      "\t${2:ports}",
      ");",
      "\t$0",
      "endmodule"
    ],
    "description": "Insert a module without parameter"
  },
  "initial": {
    "prefix": "initial",
    "body": [
      "initial begin",
      "\t$0",
      "end"
    ],
    "description": "initial begin ... end"
  },
  "case": {
    "prefix": "case",
    "body": [
      "case (${1:param})",
      "\t$2: $3",
      "\tdefault: $4",
      "endcase"
    ],
    "description": "case () ... endcase"
  },
  "casex": {
    "prefix": "casex",
    "body": [
      "casex (${1:param})",
      "\t$2: $3",
      "\tdefault: $4",
      "endcase"
    ],
    "description": "casex () ... endcase"
  },
  "casez": {
    "prefix": "casez",
    "body": [
      "casez (${1:param})",
      "\t$2: $3",
      "\tdefault: $4",
      "endcase"
    ],
    "description": "casez () ... endcase"
  },
  "parameter": {
    "prefix": "parameter",
    "body": [
      "parameter $1 = $2;"
    ],
    "description": "paramter var = val;"
  },
  "localparam": {
    "prefix": "localparam",
    "body": "localparam $1 = $2;",
    "description": "localparam var = val"
  },
  "include": {
    "prefix": [
      "include",
      "`include"
    ],
    "body": [
      "`include \"$1\""
    ],
    "description": "`include \"..\""
  },
  "define": {
    "prefix": [
      "def",
      "define",
      "`define"
    ],
    "body": [
      "`define ${1:macro}"
    ],
    "description": "`define macro"
  },
  "ifdef": {
    "prefix": [
      "ifdef",
      "`ifdef"
    ],
    "body": "`ifdef ${1:macro}",
    "description": "`ifdef macro"
  },
  "ifndef": {
    "prefix": [
      "ifndef",
      "`ifndef"
    ],
    "body": "`ifndef ${1:macro}",
    "description": "`ifndef macro"
  },
  "elsif": {
    "prefix": [
      "elsif",
      "`elsif"
    ],
    "body": "`elsif ${1:macro}",
    "description": "`elsif macro"
  },
  "endif": {
    "prefix": [
      "endif",
      "`endif"
    ],
    "body": "`endif ${1:macro}",
    "description": "`endif macro"
  },
  "undef": {
    "prefix": [
      "undef",
      "`undef"
    ],
    "body": "`undef ${1:macro}",
    "description": "`undef macro"
  },
  "default_nettype": {
    "prefix": [
      "default_nettype",
      "`default_nettype"
    ],
    "body": "`default_nettype ${1:none}",
    "description": "Set default nettype"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for ($1 = $2; $3; $4) begin",
      "\t$0",
      "end"
    ],
    "description": "for (...) begin ... end"
  },
  "while": {
    "prefix": "while",
    "body": [
      "while ($1) begin",
      "\t$2",
      "end"
    ],
    "description": "while (...) begin ... end"
  },
  "forever": {
    "prefix": "forever",
    "body": [
      "forever begin",
      "\t$0",
      "end"
    ],
    "description": "forever begin ... end"
  },
  "function": {
    "prefix": "function",
    "body": [
      "function $1;",
      "\t$2;",
      "\t$3",
      "endfunction"
    ],
    "description": "function (...) ... endfunction"
  },
  "always_ff block": {
    "prefix": "always_ff",
    "body": [
      "always_ff @( ${1:clock} ) begin : ${2:blockName}",
      "\t$0",
      "end"
    ],
    "description": "Insert an always_ff block"
  },
  "always_comb block": {
    "prefix": "always_comb",
    "body": [
      "always_comb begin : ${1:blockName}",
      "\t$0",
      "end"
    ],
    "description": "Insert an always_comb block"
  },
  "always_latch block": {
    "prefix": "always_latch",
    "body": [
      "always_latch begin : ${1:blockName}",
      "\t$0",
      "end"
    ],
    "description": "Insert an always_latch block"
  },
  "typedef struct packed": {
    "prefix": "typedef struct packed",
    "body": [
      "typedef struct packed {",
      "\t$0",
      "} ${1:struct_name};"
    ],
    "description": "typedef struct packed { ... } name"
  },
  "typedef union packed": {
    "prefix": "typedef union packed",
    "body": [
      "typedef union packed {",
      "\t$0",
      "} ${1:union_name};"
    ],
    "description": "typedef union packed { ... } name"
  },
  "task": {
    "prefix": "task",
    "body": [
      "task ${1:automatic} ${2:taskName}(${3:arguments});",
      "\t$0",
      "endtask //$1"
    ],
    "description": "task name; ... endtask"
  },
  "package": {
    "prefix": "package",
    "body": [
      "package ${1:package_name}",
      "\t$2",
      "endpackage"
    ],
    "description": "package name; ... endpackage"
  },
  "import": {
    "prefix": "import",
    "body": "import ${1:name}::${2:scope};",
    "description": "import name::scope"
  },
  "interface": {
    "prefix": "interface",
    "body": [
      "interface ${1:interfacename};",
      "\t$0",
      "endinterface //$1"
    ],
    "description": "interface name; ... endinterface"
  },
  "enum": {
    "prefix": [
      "en",
      "enum"
    ],
    "body": [
      "enum ${1:data_type} { $0 } ${2:name}"
    ],
    "description": "enum (data_type) { ... } name"
  },
  "fork-join": {
    "prefix": "fork join",
    "body": [
      "fork",
      "\t$0",
      "join"
    ],
    "description": "fork ... join"
  }
}
